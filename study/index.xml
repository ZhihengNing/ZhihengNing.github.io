<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Studies on Yuki</title>
    <link>http://localhost:1313/study/</link>
    <description>Recent content in Studies on Yuki</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>© 2024 Yuki</copyright>
    <atom:link href="http://localhost:1313/study/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>http://localhost:1313/study/basic-knowledge/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/study/basic-knowledge/test/</guid>
      <description>&lt;h1 class=&#34;relative group&#34;&gt;向对象三大特性： 
    &lt;div id=&#34;%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7&#34; aria-label=&#34;锚点&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h1&gt;
&lt;p&gt;封装、继承、多态。 设计模式需遵循面向对象的设计原则，由于本文是通过go语言实现的，所以需要先了解go中的面向对象是怎么样的。 Golang中的面向对象是通过struct结构体实现的，类似于C++和Java中的Class类。其中struct类似C++的普通类类型，interface则对应抽象类类型。对象的成员变量可见性则是通过大小写字母开头来区分。 Golang中的继承是通过组合来实现的，下例基类是Base，子类是Foo；子类可以直接调用基类的公有方法，子类也可以定义自己的属性以及实现自己的方法。 type Base struct { Name string } func (base *Base) Bar() { fmt.Println(base.Name) } type Foo struct { Base } func (foo *Foo) Bar() { foo.Base.Bar() } func main() { f := Foo{Base{Name: &amp;ldquo;hello&amp;rdquo;}} f.Bar() } // hello 📄&lt;/p&gt;</description>
      
    </item>
    
  </channel>
</rss>
